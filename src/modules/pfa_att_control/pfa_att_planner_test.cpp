#include <gtest/gtest.h>
#include <px4_defines.h>
#include <pfa_att_control/pfa_att_planner.hpp>


class PFAAttPlannerSetup : public PFAAttPlanner {
public:
	PFAAttPlannerSetup() = default;
	~PFAAttPlannerSetup() = default;

	void setupParams(const int _n, const int _n_x, const int _n_y,
		const float _sigma_a, const float _sigma_b, const float _f_max)
	{
		_param.n = _n;
		_param.n_x = _n_x;
		_param.n_y = _n_y;
		_param.sigma_a = _sigma_a;
		_param.sigma_b = _sigma_b;
		_param.f_max = _f_max;
	}

	static float calc_attitude_error(const Dcmf & R_r, const Dcmf & R_d)
	{
		matrix::SquareMatrix3f identity;
		identity.setIdentity();
		return 0.5f * static_cast<matrix::SquareMatrix3f>(identity - R_d.T() * R_r).trace();
	}

	void test_planning(const Vector3f & in_thrust, const bool expected_replan, const float theta_ans,
		const Dcmf & in_R, const Vector3f & in_omega,
		const Dcmf & in_R_ans, const Vector3f & in_omega_ans)
	{
		Dcmf R_d;
		Vector3f omega_d;
		const bool planned = plan(in_thrust, in_R, in_omega, R_d, omega_d);
		const float theta = _planned_theta;
		const float att_err = PFAAttPlannerSetup::calc_attitude_error(R_d, in_R_ans);
		const float omega_err = (in_omega - in_omega_ans).norm();

		printf("planned: %d, att_err: %f, omega_err: %f\n", planned, static_cast<double>(att_err), static_cast<double>(omega_err));
		printf("theta: %f, theta_ans: %f\n", static_cast<double>(theta), static_cast<double>(theta_ans));
		printf("f_r:\n");
		in_thrust.print();
		printf("R_d:\n");
		R_d.print();
		printf("R_ans:\n");
		in_R_ans.print();

		EXPECT_NEAR(att_err, 0.0f, 1e-5f);
		EXPECT_NEAR(omega_err, 0.0f, 1e-5f);
		EXPECT_NEAR(theta, theta_ans, 1e-2f);
	}
};

class PFAAttPlannerFourAgentTest : public ::testing::Test {
public:
	PFAAttPlannerFourAgentTest()
	{
		planner.setupParams(4, 2, 2, M_PI_F / 6.0f, M_PI_2_F, 10.3089f);
	}

	~PFAAttPlannerFourAgentTest() = default;

	PFAAttPlannerSetup planner{};
};

TEST_F(PFAAttPlannerFourAgentTest, testFourAgentSystemPlanningXaxis)
{
	const int num_test = 20;
	const float theta_ans[num_test] = {1.570795, 1.253464, 0.936130, 0.618798, 0.301466, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.047600, 0.364933, 0.682265, 0.999598, 1.316930};

	const float f_r_ans_f[num_test][3] = {
		{-0.000000, -0.000000, -1.000000}, {-0.000000, -0.312033, -0.950071}, {-0.000000, -0.592908, -0.805270},
		{-0.000000, -0.814576, -0.580057}, {-0.000000, -0.954902, -0.296920}, {-0.000000, -0.999874, 0.015866},
		{-0.000000, -0.945001, 0.327068}, {-0.000000, -0.795762, 0.605610}, {-0.000000, -0.567060, 0.823677},
		{-0.000000, -0.281733, 0.959493}, {0.000000, 0.031728, 0.999497}, {0.000000, 0.342020, 0.939693},
		{0.000000, 0.618159, 0.786053}, {0.000000, 0.832570, 0.553920}, {0.000000, 0.963842, 0.266474},
		{0.000000, 0.998867, -0.047582}, {0.000000, 0.934148, -0.356886}, {0.000000, 0.776146, -0.630553},
		{0.000000, 0.540641, -0.841254}, {0.000000, 0.251148, -0.967949}};

	// {b1, b2, b3}, ...
	const float R_ans_f[num_test][3][3] = {
		{{1.000000, 0.000000, 0.000000}, {-0.000000, 0.000001, 1.000000}, {0.000000, -1.000000, 0.000001}},
		{{1.000000, 0.000000, 0.000000}, {-0.000000, 0.312033, 0.950071}, {0.000000, -0.950071, 0.312033}},
		{{1.000000, 0.000000, 0.000000}, {-0.000000, 0.592909, 0.805270}, {0.000000, -0.805270, 0.592909}},
		{{1.000000, 0.000000, 0.000000}, {-0.000000, 0.814576, 0.580057}, {0.000000, -0.580057, 0.814576}},
		{{1.000000, 0.000000, 0.000000}, {-0.000000, 0.954902, 0.296920}, {0.000000, -0.296920, 0.954902}},
		{{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}},
		{{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}},
		{{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}},
		{{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}},
		{{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}},
		{{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}},
		{{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}},
		{{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}},
		{{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}},
		{{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}},
		{{1.000000, -0.000000, 0.000000}, {0.000000, 0.998867, -0.047582}, {0.000000, 0.047582, 0.998867}},
		{{1.000000, -0.000000, 0.000000}, {0.000000, 0.934148, -0.356886}, {0.000000, 0.356886, 0.934148}},
		{{1.000000, -0.000000, 0.000000}, {0.000000, 0.776147, -0.630553}, {0.000000, 0.630553, 0.776147}},
		{{1.000000, -0.000000, 0.000000}, {0.000000, 0.540641, -0.841253}, {0.000000, 0.841253, 0.540641}},
		{{1.000000, -0.000000, 0.000000}, {0.000000, 0.251149, -0.967949}, {0.000000, 0.967949, 0.251149}}};

	for (int i=0; i<num_test; i++) {
		Vector3f thrust{f_r_ans_f[i][0], f_r_ans_f[i][1], f_r_ans_f[i][2]};
		Dcmf R_r{Eulerf{0.0f, 0.0f, 0.0f}};
		Dcmf R_ans{R_ans_f[i]};
		R_ans = R_ans.T();

		Vector3f omega_r{0.0f, 0.0f, 0.0f};
		Vector3f omega_ans{0.0f, 0.0f, 0.0f};
		R_ans.print();
		planner.test_planning(thrust, false, theta_ans[i], R_r, omega_r, R_ans, omega_ans);
	}
}

TEST_F(PFAAttPlannerFourAgentTest, testFourAgentSystemPlanningYaxis)
{
	const int num_test = 20;
	const float theta_ans[num_test] = {1.570795, 1.253464, 0.936130, 0.618798, 0.301466, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.047600, 0.364933, 0.682265, 0.999598, 1.316930};

	const float f_r_ans_f[num_test][3] = {{-0.000000, -0.000000, -1.000000}, {-0.312033, -0.000000, -0.950071}, {-0.592908, -0.000000, -0.805270}, {-0.814576, -0.000000, -0.580057}, {-0.954902, -0.000000, -0.296920}, {-0.999874, -0.000000, 0.015866}, {-0.945001, -0.000000, 0.327068}, {-0.795762, -0.000000, 0.605610}, {-0.567060, -0.000000, 0.823677}, {-0.281733, -0.000000, 0.959493}, {0.031728, 0.000000, 0.999497}, {0.342020, 0.000000, 0.939693}, {0.618159, 0.000000, 0.786053}, {0.832570, 0.000000, 0.553920}, {0.963842, 0.000000, 0.266474}, {0.998867, 0.000000, -0.047582}, {0.934148, 0.000000, -0.356886}, {0.776146, 0.000000, -0.630553}, {0.540641, 0.000000, -0.841254}, {0.251148, 0.000000, -0.967949}};

	const float R_ans_f[num_test][3][3] = {{{0.000001, 0.000000, 1.000000}, {0.000000, 1.000000, -0.000000}, {-1.000000, 0.000000, 0.000001}}, {{0.312033, 0.000000, 0.950071}, {0.000000, 1.000000, -0.000000}, {-0.950071, 0.000000, 0.312033}}, {{0.592909, 0.000000, 0.805270}, {0.000000, 1.000000, -0.000000}, {-0.805270, 0.000000, 0.592909}}, {{0.814576, 0.000000, 0.580057}, {0.000000, 1.000000, -0.000000}, {-0.580057, 0.000000, 0.814576}}, {{0.954902, 0.000000, 0.296920}, {0.000000, 1.000000, -0.000000}, {-0.296920, 0.000000, 0.954902}}, {{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}}, {{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}}, {{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}}, {{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}}, {{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}}, {{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}}, {{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}}, {{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}}, {{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}}, {{1.000000, 0.000000, 0.000000}, {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000}}, {{0.998867, 0.000000, -0.047582}, {0.000000, 1.000000, 0.000000}, {0.047582, 0.000000, 0.998867}}, {{0.934148, 0.000000, -0.356886}, {0.000000, 1.000000, 0.000000}, {0.356886, 0.000000, 0.934148}}, {{0.776147, 0.000000, -0.630553}, {0.000000, 1.000000, 0.000000}, {0.630553, 0.000000, 0.776147}}, {{0.540641, 0.000000, -0.841253}, {0.000000, 1.000000, 0.000000}, {0.841253, 0.000000, 0.540641}}, {{0.251149, 0.000000, -0.967949}, {0.000000, 1.000000, 0.000000}, {0.967949, 0.000000, 0.251149}}};

	for (int i=0; i<num_test; i++) {
		Vector3f thrust{f_r_ans_f[i][0], f_r_ans_f[i][1], f_r_ans_f[i][2]};
		Dcmf R_r{Eulerf{0.0f, 0.0f, 0.0f}};
		Dcmf R_ans{R_ans_f[i]};
		R_ans = R_ans.T();

		Vector3f omega_r{0.0f, 0.0f, 0.0f};
		Vector3f omega_ans{0.0f, 0.0f, 0.0f};
		R_ans.print();
		planner.test_planning(thrust, false, theta_ans[i], R_r, omega_r, R_ans, omega_ans);
	}
}
